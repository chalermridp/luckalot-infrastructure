AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description:  luckalot infrastructure

Parameters:
  AppName:
    Type: String
    Default: luckalot
  StageName:
    Type: String
    Default: dev
    AllowedValues: [dev, ppe, prod]
    ConstraintDescription: must specify dev, ppe or prod

  MainVpcCIDR:
    Type: String
    Default: 10.100.0.0/16

  MainPublicSubnet1CIDR:
    Type: String
    Default: 10.100.10.0/24

  MainPublicSubnet2CIDR:
    Type: String
    Default: 10.100.11.0/24

  MainPrivateAppSubnet1CIDR:
    Type: String
    Default: 10.100.20.0/24

  MainPrivateAppSubnet2CIDR:
    Type: String
    Default: 10.100.21.0/24

  MainPrivateDbSubnet1CIDR:
    Type: String
    Default: 10.100.30.0/24

  MainPrivateDbSubnet2CIDR:
    Type: String
    Default: 10.100.31.0/24

  MngmtVpcCIDR:
    Type: String
    Default: 10.101.0.0/16

  MngmtPublicSubnet1CIDR:
    Type: String
    Default: 10.101.10.0/24

  MngmtPublicSubnet2CIDR:
    Type: String
    Default: 10.101.11.0/24

  MngmtPrivateSubnet1CIDR:
    Type: String
    Default: 10.101.20.0/24

  MngmtPrivateSubnet2CIDR:
    Type: String
    Default: 10.101.21.0/24

Resources:
  MainVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref MainVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: main-vpc

  MainInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: main-internet-gateway

  MainInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MainInternetGateway
      VpcId: !Ref MainVpc

  MainPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref MainPublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: main-public-subnet-1a

  MainPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVpc
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref MainPublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: main-public-subnet-1b

  MainPrivateAppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVpc
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref MainPrivateAppSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: main-private-subnet-app-1a

  MainPrivateAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVpc
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref MainPrivateAppSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: main-private-subnet-app-1b

  MainPrivateDbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVpc
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref MainPrivateDbSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: main-private-subnet-db-1a

  MainPrivateDbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVpc
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref MainPrivateDbSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: main-private-subnet-db-1b

  MainPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVpc
      Tags:
        - Key: Name
          Value: main-public-route-table

  MainDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MainInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref MainPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MainInternetGateway

  MainPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainPublicRouteTable
      SubnetId: !Ref MainPublicSubnet1

  MainPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainPublicRouteTable
      SubnetId: !Ref MainPublicSubnet2

  MainPrivateAppRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVpc
      Tags:
        - Key: Name
          Value: main-private-app-route-table-1a

  MainPrivateAppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainPrivateAppRouteTable1
      SubnetId: !Ref MainPrivateAppSubnet1

  MainPrivateAppRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVpc
      Tags:
        - Key: Name
          Value: main-private-app-route-table-1b

  MainPrivateAppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainPrivateAppRouteTable2
      SubnetId: !Ref MainPrivateAppSubnet2

  MainPrivateDbRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVpc
      Tags:
        - Key: Name
          Value: main-private-db-route-table-1a

  MainPrivateDbSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainPrivateDbRouteTable1
      SubnetId: !Ref MainPrivateDbSubnet1

  MainPrivateDbRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVpc
      Tags:
        - Key: Name
          Value: main-private-db-route-table-1b

  MainPrivateDbSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainPrivateDbRouteTable2
      SubnetId: !Ref MainPrivateDbSubnet2

  MngmtVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref MngmtVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: mngmt-vpc

  MngmtInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: mngmt-internet-gateway

  MngmtInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MngmtInternetGateway
      VpcId: !Ref MngmtVpc

  MngmtPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MngmtVpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref MngmtPublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: mngmt-public-subnet-1a

  MngmtPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MngmtVpc
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref MngmtPublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: mngmt-public-subnet-1b

  MngmtPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MngmtVpc
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref MngmtPrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: mngmt-private-subnet-1a

  MngmtPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MngmtVpc
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref MngmtPrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: mngmt-private-subnet-1b

  MngmtPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MngmtVpc
      Tags:
        - Key: Name
          Value: mngmt-public-route-table

  MngmtDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MngmtInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref MngmtPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MngmtInternetGateway

  MngmtPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MngmtPublicRouteTable
      SubnetId: !Ref MngmtPublicSubnet1

  MngmtPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MngmtPublicRouteTable
      SubnetId: !Ref MngmtPublicSubnet2

  MngmtPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MngmtVpc
      Tags:
        - Key: Name
          Value: mngmt-private-route-table-1a

  MngmtPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable1
      SubnetId: !Ref MngmtPrivateSubnet1

  MngmtPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MngmtVpc
      Tags:
        - Key: Name
          Value: mngmt-private-route-table-1b

  MngmtPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable2
      SubnetId: !Ref MngmtPrivateSubnet2
  
  MainAndMngmtVpcPeering:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref MainVpc
      PeerVpcId: !Ref MngmtVpc
      Tags:
        - Key: Name
          Value: main-and-mngmt-vpc-peering

  MainPublicRouteTableToMngmtPublicSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPublicRouteTable
      DestinationCidrBlock: !Ref MngmtPublicSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPublicRouteTableToMngmtPublicSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPublicRouteTable
      DestinationCidrBlock: !Ref MngmtPublicSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPublicRouteTableToMngmtPrivateSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPublicRouteTable
      DestinationCidrBlock: !Ref MngmtPrivateSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPublicRouteTableToMngmtPrivateSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPublicRouteTable
      DestinationCidrBlock: !Ref MngmtPrivateSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateAppRouteTable1ToMngmtPublicSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateAppRouteTable1
      DestinationCidrBlock: !Ref MngmtPublicSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateAppRouteTable1ToMngmtPublicSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateAppRouteTable1
      DestinationCidrBlock: !Ref MngmtPublicSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateAppRouteTable2ToMngmtPublicSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateAppRouteTable2
      DestinationCidrBlock: !Ref MngmtPublicSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateAppRouteTable2ToMngmtPublicSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateAppRouteTable2
      DestinationCidrBlock: !Ref MngmtPublicSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateAppRouteTable1ToMngmtPrivateSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateAppRouteTable1
      DestinationCidrBlock: !Ref MngmtPrivateSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateAppRouteTable1ToMngmtPrivateSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateAppRouteTable1
      DestinationCidrBlock: !Ref MngmtPrivateSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateAppRouteTable2ToMngmtPrivateSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateAppRouteTable2
      DestinationCidrBlock: !Ref MngmtPrivateSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateAppRouteTable2ToMngmtPrivateSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateAppRouteTable2
      DestinationCidrBlock: !Ref MngmtPrivateSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateDbRouteTable1ToMngmtPublicSubnet1:  
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateDbRouteTable1
      DestinationCidrBlock: !Ref MngmtPublicSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateDbRouteTable1ToMngmtPublicSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateDbRouteTable1
      DestinationCidrBlock: !Ref MngmtPublicSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateDbRouteTable2ToMngmtPublicSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateDbRouteTable2
      DestinationCidrBlock: !Ref MngmtPublicSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateDbRouteTable2ToMngmtPublicSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateDbRouteTable2
      DestinationCidrBlock: !Ref MngmtPublicSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateDbRouteTable1ToMngmtPrivateSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateDbRouteTable1
      DestinationCidrBlock: !Ref MngmtPrivateSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateDbRouteTable1ToMngmtPrivateSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateDbRouteTable1
      DestinationCidrBlock: !Ref MngmtPrivateSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateDbRouteTable2ToMngmtPrivateSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MainPrivateDbRouteTable2
      DestinationCidrBlock: !Ref MngmtPrivateSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MainPrivateDbRouteTable2ToMngmtPrivateSubnet2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref MngmtPrivateSubnet2CIDR
      RouteTableId: !Ref MainPrivateDbRouteTable2
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPublicRouteTableToMainPublicSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPublicRouteTable
      DestinationCidrBlock: !Ref MainPublicSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPublicRouteTableToMainPublicSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPublicRouteTable
      DestinationCidrBlock: !Ref MainPublicSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPublicRouteTableToMainPrivateAppSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPublicRouteTable
      DestinationCidrBlock: !Ref MainPrivateAppSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPublicRouteTableToMainPrivateAppSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPublicRouteTable
      DestinationCidrBlock: !Ref MainPrivateAppSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPublicRouteTableToMainPrivateDbSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPublicRouteTable
      DestinationCidrBlock: !Ref MainPrivateDbSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPublicRouteTableToMainPrivateDbSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPublicRouteTable
      DestinationCidrBlock: !Ref MainPrivateDbSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable1ToMainPublicSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable1
      DestinationCidrBlock: !Ref MainPublicSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable1ToMainPublicSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable1
      DestinationCidrBlock: !Ref MainPublicSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable2ToMainPublicSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable2
      DestinationCidrBlock: !Ref MainPublicSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable2ToMainPublicSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable2
      DestinationCidrBlock: !Ref MainPublicSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable1ToMainPrivateAppSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable1
      DestinationCidrBlock: !Ref MainPrivateAppSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable1ToMainPrivateAppSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable1
      DestinationCidrBlock: !Ref MainPrivateAppSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable2ToMainPrivateAppSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable2
      DestinationCidrBlock: !Ref MainPrivateAppSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable2ToMainPrivateAppSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable2
      DestinationCidrBlock: !Ref MainPrivateAppSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable1ToMainPrivateDbSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable1
      DestinationCidrBlock: !Ref MainPrivateDbSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable1ToMainPrivateDbSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable1
      DestinationCidrBlock: !Ref MainPrivateDbSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable2ToMainPrivateDbSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable2
      DestinationCidrBlock: !Ref MainPrivateDbSubnet1CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtPrivateRouteTable2ToMainPrivateDbSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MngmtPrivateRouteTable2
      DestinationCidrBlock: !Ref MainPrivateDbSubnet2CIDR
      VpcPeeringConnectionId: !Ref MainAndMngmtVpcPeering

  MngmtVpnSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: mngmt-vpn-sg
      Tags:
        - Key: Name
          Value: mngmt-vpn-sg
      GroupDescription: Allow vpn and ssh to public client
      VpcId: !Ref MngmtVpc
      SecurityGroupIngress:
        - IpProtocol: UDP
          FromPort: 1194
          ToPort: 1194
          CidrIp: 0.0.0.0/0
        - IpProtocol: TCP
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  MainAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: main-app-sg
      Tags:
        - Key: Name
          Value: main-app-sg
      GroupDescription: Allow ssh to vpn client
      VpcId: !Ref MainVpc
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref MngmtVpnSecurityGroup

  MainDbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: main-db-sg
      Tags:
        - Key: Name
          Value: main-db-sg
      GroupDescription: Allow postgres to app and vpn client
      VpcId: !Ref MainVpc
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref MainAppSecurityGroup
        - IpProtocol: TCP
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref MngmtVpnSecurityGroup

  PostgresDbSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret username and password for Postgres Db instance
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  PostgresDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet group for postgres-db
      DBSubnetGroupName: postgres-db-subnet-group
      SubnetIds: 
        - !Ref MainPrivateDbSubnet1
        - !Ref MainPrivateDbSubnet2
  
  PostgresDbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: postgres-db
      DBInstanceClass: db.t2.micro
      DBName: luckalot
      Engine: postgres
      AllocatedStorage: 20
      Port: 5432
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref PostgresDbSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref PostgresDbSecret, ':SecretString:password}}' ]]
      DBSubnetGroupName: !Ref PostgresDbSubnetGroup
      VPCSecurityGroups:
        - !Ref MainDbSecurityGroup
      PubliclyAccessible: false
      
Outputs:
  MainVpc:
    Description: A reference to the created main vpc
    Value: !Ref MainVpc
    Export:
      Name: !Sub "${AWS::StackName}-MainVpc"

  MainPublicSubnets:
    Description: A list of the main public subnets
    Value: !Join [ ",", [ !Ref MainPublicSubnet1, !Ref MainPublicSubnet2 ]]
    Export:
      Name: !Sub "${AWS::StackName}-MainPublicSubnets"

  MainPrivateSubnets:
    Description: A list of the main private subnets
    Value: !Join [ ",", [ !Ref MainPrivateAppSubnet1, !Ref MainPrivateAppSubnet2 ]]
    Export:
      Name: !Sub "${AWS::StackName}-MainPrivateSubnets"

  MainPrivateDbSubnets:
    Description: A list of the main private db subnets
    Value: !Join [ ",", [ !Ref MainPrivateDbSubnet1, !Ref MainPrivateDbSubnet2 ]]
    Export:
      Name: !Sub "${AWS::StackName}-MainPrivateDbSubnets"

  MainPublicSubnet1:
    Description: A reference to the main public subnet in the 1st Availability Zone
    Value: !Ref MainPublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-MainPublicSubnet1"

  MainPublicSubnet2:
    Description: A reference to the main public subnet in the 2nd Availability Zone
    Value: !Ref MainPublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-MainPublicSubnet2"

  MainPrivateAppSubnet1:
    Description: A reference to the main private subnet in the 1st Availability Zone
    Value: !Ref MainPrivateAppSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-MainPrivateAppSubnet1"

  MainPrivateAppSubnet2:
    Description: A reference to the main private subnet in the 2nd Availability Zone
    Value: !Ref MainPrivateAppSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-MainPrivateAppSubnet2"

  MainPrivateDbSubnet1:
    Description: A reference to the main private db subnet in the 1st Availability Zone
    Value: !Ref MainPrivateDbSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-MainPrivateDbSubnet1"

  MainPrivateDbSubnet2:
    Description: A reference to the main private db subnet in the 2nd Availability Zone
    Value: !Ref MainPrivateDbSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-MainPrivateDbSubnet2"

  MngmtVpc:
    Description: A reference to the created mngmt vpc
    Value: !Ref MngmtVpc
    Export:
      Name: !Sub "${AWS::StackName}-MngmtVpc"

  MngmtPublicSubnets:
    Description: A list of the mngmt public subnets
    Value: !Join [ ",", [ !Ref MngmtPublicSubnet1, !Ref MngmtPublicSubnet2 ]]
    Export:
      Name: !Sub "${AWS::StackName}-MngmtPublicSubnets"

  MngmtPrivateSubnets:
    Description: A list of the mngmt private subnets
    Value: !Join [ ",", [ !Ref MngmtPrivateSubnet1, !Ref MngmtPrivateSubnet2 ]]
    Export:
      Name: !Sub "${AWS::StackName}-MngmtPrivateSubnets"

  MngmtPublicSubnet1:
    Description: A reference to the mngmt public subnet in the 1st Availability Zone
    Value: !Ref MngmtPublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-MngmtPublicSubnet1"

  MngmtPublicSubnet2:
    Description: A reference to the mngmt public subnet in the 2nd Availability Zone
    Value: !Ref MngmtPublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-MngmtPublicSubnet2"

  MngmtPrivateSubnet1:
    Description: A reference to the mngmt private subnet in the 1st Availability Zone
    Value: !Ref MngmtPrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-MngmtPrivateSubnet1"

  MngmtPrivateSubnet2:
    Description: A reference to the mngmt private subnet in the 2nd Availability Zone
    Value: !Ref MngmtPrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-MngmtPrivateSubnet2"

  MngmtVpnSecurityGroup:
    Description: A reference to the mngmt vpn security group
    Value: !Ref MngmtVpnSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-MngmtVpnSecurityGroup"

  MainAppSecurityGroup:
    Description: A reference to the main app security group
    Value: !Ref MainAppSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-MainAppSecurityGroup"

  MainDbSecurityGroup:
    Description: A reference to the main db security group
    Value: !Ref MainDbSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-MainDbSecurityGroup"

  PostgresDbEndpoint:
    Description: A reference to the postgres db endpoint
    Value: !GetAtt PostgresDbInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-PostgresDbEndpoint"

  PostgresDbPort:
    Description: A reference to the postgres db port
    Value: !GetAtt PostgresDbInstance.Endpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-PostgresDbPort"